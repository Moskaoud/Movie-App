package com.moskaoud.movieapp.popularmovies;
import android.app.LoaderManager;
import android.content.AsyncTaskLoader;
import android.content.Loader;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;

import com.moskaoud.movieapp.popularmovies.data.FavoriteMovieDbHelper;
import com.moskaoud.movieapp.popularmovies.data.MovieContract;
public class FavoriteMoviesNew extends AppCompatActivity implements
        LoaderManager.LoaderCallbacks<Cursor>{

    private static final String TAG = FavoriteMoviesNew.class.getSimpleName();
//    private static final int TASK_LOADER_ID = 0;
    private SQLiteDatabase mDb;
    private FavoriteMoviesAdapter mFavoriteMovieAdapter ;
    RecyclerView mFavoriteMovieRecyclerView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);///TODO I'M HERE TRYING TO DO QUERY AND USE LOADER
        setContentView(R.layout.activity_favorite_movies_new);


        mFavoriteMovieRecyclerView = (RecyclerView) this.findViewById(R.id.rv_favorite_movies);
        mFavoriteMovieRecyclerView.setLayoutManager(new LinearLayoutManager(this)); //TODO problem1 is here

        FavoriteMovieDbHelper dbHelper = new FavoriteMovieDbHelper(this);
        mDb = dbHelper.getReadableDatabase();

        Cursor cursor = getAllFavoriteMovies();// i think i shouldn't do this as no need i have to save and show asterisk only


        mFavoriteMovieAdapter = new FavoriteMoviesAdapter(this,cursor);
        mFavoriteMovieRecyclerView.setAdapter(mFavoriteMovieAdapter);//TODO problem 2 in recycler view

         /*
          Ensure a loader is initialized and active. If the loader doesn't already exist, one is
          created, otherwise the last created loader is re-used.
         */

//         getSupportLoaderManager().initLoader(TASK_LOADER_ID, null, (android.support.v4.app.LoaderManager.LoaderCallbacks<Object>) this);

    }
    @Override
    protected void onResume() {
        super.onResume();
        // re-queries for all tasks
//        getSupportLoaderManager().restartLoader(TASK_LOADER_ID, null, (android.support.v4.app.LoaderManager.LoaderCallbacks<Object>) this);
    }
    /**
     * Instantiates and returns a new AsyncTaskLoader with the given ID.
     * This loader will return task data as a Cursor or null if an error occurs.
     *
     * Implements the required callbacks to take care of loading data at all stages of loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {

        return new  AsyncTaskLoader<Cursor>(this) {

            // Initialize a Cursor, this will hold all the task data
            Cursor mTaskData = null;

            // onStartLoading() is called when a loader first starts loading data
            @Override
            protected void onStartLoading() {
                if (mTaskData != null) {
                    // Delivers any previously loaded data immediately
                    deliverResult(mTaskData);
                } else {
                    // Force a new load
                    forceLoad();
                }
            }

            // loadInBackground() performs asynchronous loading of data
            @Override
            public Cursor loadInBackground() {
                // Will implement to load data
                // COMPLETED (5) Query and load all task data in the background; sort by priority
                // [Hint] use a try/catch block to catch any errors in loading data
          try {
              return getContentResolver().query(MovieContract.MovieFavorite.CONTENT_URI,
                      null,
                      null,
                      null,
                      null
                      //        MovieContract.MovieFavorite.
              );

              } catch (Exception e) {
              Log.e(TAG, "Failed to asynchronously load data.");
              e.printStackTrace();
              return null;
              }
            }

            // deliverResult sends the result of the load, a Cursor, to the registered listener
            public void deliverResult(Cursor data) {
                mTaskData = data;
                super.deliverResult(data);
            }
        };

    }
    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        // Update the data that the adapter uses to create ViewHolders
        mFavoriteMovieAdapter.swapCursor(data);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        mFavoriteMovieAdapter.swapCursor(null);
    }

    public Cursor getAllFavoriteMovies() {
        return mDb.query(
                MovieContract.MovieFavorite.TABLE_NAME,
                null,
                null,
                null,
                null,
                null,
                null
        );
    }

//    @Override
//    public void onPointerCaptureChanged(boolean hasCapture) {
//
//    }
}
// TODO USING LOADER //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//package com.example.mukaoud.popularmovies;
//        import android.app.LoaderManager;
//        import android.content.AsyncTaskLoader;
//        import android.content.Loader;
//        import android.database.Cursor;
//        import android.database.sqlite.SQLiteDatabase;
//        import android.support.annotation.NonNull;
//        import android.support.v7.app.AppCompatActivity;
//        import android.os.Bundle;
//        import android.support.v7.widget.LinearLayoutManager;
//        import android.support.v7.widget.RecyclerView;
//        import android.util.Log;
//
//        import com.example.mukaoud.popularmovies.data.FavoriteMovieDbHelper;
//        import com.example.mukaoud.popularmovies.data.MovieContract;
//public class FavoriteMoviesNew extends AppCompatActivity implements
//        LoaderManager.LoaderCallbacks<Cursor>{
//
//    private static final String TAG = FavoriteMoviesNew.class.getSimpleName();
//    private static final int TASK_LOADER_ID = 0;
//    private SQLiteDatabase mDb;
//    private FavoriteMoviesAdapter mFavoriteMovieAdapter ;
//    RecyclerView mFavoriteMovieRecyclerView;
//
//    @Override
//    protected void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);///TODO I'M HERE TRYING TO DO QUERY AND USE LOADER
//        setContentView(R.layout.activity_favorite_movies_new);
//
//
//        mFavoriteMovieRecyclerView = (RecyclerView) this.findViewById(R.id.rv_favorite_movies);
//        mFavoriteMovieRecyclerView.setLayoutManager(new LinearLayoutManager(this)); //TODO problem1 is here
//
//        FavoriteMovieDbHelper dbHelper = new FavoriteMovieDbHelper(this);
//        mDb = dbHelper.getReadableDatabase();
//
//        Cursor cursor = getAllFavoriteMovies();// i think i shouldn't do this as no need i have to save and show asterisk only
//
//
//        mFavoriteMovieAdapter = new FavoriteMoviesAdapter(this);
//        mFavoriteMovieRecyclerView.setAdapter(mFavoriteMovieAdapter);//TODO problem 2 in recycler view
//
//         /*
//          Ensure a loader is initialized and active. If the loader doesn't already exist, one is
//          created, otherwise the last created loader is re-used.
//         */
//
////         getSupportLoaderManager().initLoader(TASK_LOADER_ID, null, (android.support.v4.app.LoaderManager.LoaderCallbacks<Object>) this);
//
//    }
//    @Override
//    protected void onResume() {
//        super.onResume();
//        // re-queries for all tasks
////        getSupportLoaderManager().restartLoader(TASK_LOADER_ID, null, (android.support.v4.app.LoaderManager.LoaderCallbacks<Object>) this);
//    }
//    /**
//     * Instantiates and returns a new AsyncTaskLoader with the given ID.
//     * This loader will return task data as a Cursor or null if an error occurs.
//     *
//     * Implements the required callbacks to take care of loading data at all stages of loading.
//     */
//    @Override
//    public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {
//
//        return new  AsyncTaskLoader<Cursor>(this) {
//
//            // Initialize a Cursor, this will hold all the task data
//            Cursor mTaskData = null;
//
//            // onStartLoading() is called when a loader first starts loading data
//            @Override
//            protected void onStartLoading() {
//                if (mTaskData != null) {
//                    // Delivers any previously loaded data immediately
//                    deliverResult(mTaskData);
//                } else {
//                    // Force a new load
//                    forceLoad();
//                }
//            }
//
//            // loadInBackground() performs asynchronous loading of data
//            @Override
//            public Cursor loadInBackground() {
//                // Will implement to load data
//
//                // -                // TODO (5) Query and load all task data in the background; sort by priority
//                //  +                // COMPLETED (5) Query and load all task data in the background; sort by priority
//                // [Hint] use a try/catch block to catch any errors in loading data
//
//                //   -                return null;
//                try {
//                    return getContentResolver().query(MovieContract.MovieFavorite.CONTENT_URI,
//                            null,
//                            null,
//                            null,
//                            null
//                            //        MovieContract.MovieFavorite.
//                    );
//
//                } catch (Exception e) {
//                    Log.e(TAG, "Failed to asynchronously load data.");
//                    e.printStackTrace();
//                    return null;
//                }
//            }
//
//            // deliverResult sends the result of the load, a Cursor, to the registered listener
//            public void deliverResult(Cursor data) {
//                mTaskData = data;
//                super.deliverResult(data);
//            }
//        };
//
//    }
//    /**
//     * Called when a previously created loader has finished its load.
//     *
//     * @param loader The Loader that has finished.
//     * @param data The data generated by the Loader.
//     */
//    @Override
//    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
//        // Update the data that the adapter uses to create ViewHolders
//        mFavoriteMovieAdapter.swapCursor(data);
//    }
//
//    /**
//     * Called when a previously created loader is being reset, and thus
//     * making its data unavailable.
//     * onLoaderReset removes any references this activity had to the loader's data.
//     *
//     * @param loader The Loader that is being reset.
//     */
//    @Override
//    public void onLoaderReset(Loader<Cursor> loader) {
//        mFavoriteMovieAdapter.swapCursor(null);
//    }
//
//
//
//
//    public Cursor getAllFavoriteMovies() {
//        return mDb.query(
//                MovieContract.MovieFavorite.TABLE_NAME,
//                null,
//                null,
//                null,
//                null,
//                null,
//                null
//        );
//    }
//
//    @Override
//    public void onPointerCaptureChanged(boolean hasCapture) {
//
//    }
//}
//TODO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
